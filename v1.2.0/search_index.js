var documenterSearchIndex = {"docs":
[{"location":"api/#Api","page":"API","title":"Api","text":"","category":"section"},{"location":"api/#SquidGame","page":"API","title":"SquidGame","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"","category":"page"},{"location":"api/","page":"API","title":"API","text":"```@autodocs Modules = [SquidGame]","category":"page"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/#Example-Prisoner-Game","page":"Examples","title":"Example Prisoner Game","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using SquidGame\nimport SquidGame._run_strategy\nusing Plots\n\nnumber_of_rounds = 10\n\n# Define Game\n# (The infrastructure is generic enough so you can have different rewards per iteration).\nprisoner_game = prisoner(number_of_rounds) # same as `Game(; rewards=(iter) -> [[5. 0]; [10 2]], number_of_rounds)`\n\n\n# Define a name for your strategy\nabstract type MyStrategy <: Strategy end\n\n# Define the logic of your strategy\nfunction SquidGame._run_strategy(::Type{MyStrategy}, reward::AbstractArray{Float64}, \n    history::Union{NamedTuple{(:my_action, :their_action, :my_reward, :their_reward), Tuple{Vector{Int64}, Matrix{Int64}, Vector{Float64}, Matrix{Float64}}}, Missing},\n    rounds_left::Union{Int,  Missing}\n)\n    \n    # your can use whatever logic you wish. This example is an angel, it will always choose the cooperative action.\n    return find_cooperative_action(reward)\nend\n\nstrategies = Vector{Type{<:Strategy}}()\n\n# push it to the stage\npush!(strategies, MyStrategy)\n\n# Push your opponent \npush!(strategies, Devil)\n\n# Simulate the game\nrealized_reward_history, strategies_action_history = play_game(prisoner_game, strategies)\n\n# Visualise the scores over all rounds \nscoreboard(realized_reward_history, strategies)","category":"page"},{"location":"examples/#Play-a-game-with-3-players","page":"Examples","title":"Play a game with 3 players","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"# add a player \npush!(strategies, RandomStrategy)\n\n# choose the game\nrandom_game = randgame(number_of_rounds)\n\n# Simulate the game\nrealized_reward_history, strategies_action_history = play_game(random_game, strategies)\n\n# Visualise the scores over all rounds \nscoreboard(realized_reward_history, strategies)","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = SquidGame","category":"page"},{"location":"","page":"Home","title":"Home","text":"<div style=\"width:100%; height:150px;border-width:4px;border-style:solid;padding-top:25px;\n        border-color:#000;border-radius:10px;text-align:center;background-color:#99DDFF;\n        color:#000\">\n    <h3 style=\"color: black;\">Star us on GitHub!</h3>\n    <a class=\"github-button\" href=\"https://github.com/andrewrosemberg/SquidGame.jl\" data-icon=\"octicon-star\" data-size=\"large\" data-show-count=\"true\" aria-label=\"Star andrewrosemberg/SquidGame.jl on GitHub\" style=\"margin:auto\">Star</a>\n    <script async defer src=\"https://buttons.github.io/buttons.js\"></script>\n</div>","category":"page"},{"location":"#SquidGame","page":"Home","title":"SquidGame","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for SquidGame.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Strategy simulation for simple games.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"] add SquidGame","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Using function play_game, simulates a game for of N strategies competing against each other (where N is the appropriate number of players for the game).","category":"page"},{"location":"","page":"Home","title":"Home","text":"Implementable games are \"deterministic\" games where each player knows the possible rewards for each round at decision time, with the only uncertainty being the action of other players.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Rewards are defined as a multi-dimensional array where your action is the first index and rivals are the remaining indexes. For example, a 2 player game:","category":"page"},{"location":"","page":"Home","title":"Home","text":" Rival Action 1 Rival Action 2\nYour Action 1 5.0 0.0\nYour Action 2 10.0 2.0","category":"page"},{"location":"","page":"Home","title":"Home","text":"In this case:","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you acted with action 1 and your rival also chose action 1, you would both earn 5 points;\nIf you acted with action 1 and your rival chose action 2, you would earn 0 and they would earn 10. ","category":"page"}]
}
